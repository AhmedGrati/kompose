I"ʑ<h1 id="user-guide">User Guide</h1>

<ul id="markdown-toc">
  <li><a href="#user-guide" id="markdown-toc-user-guide">User Guide</a>    <ul>
      <li><a href="#kompose-convert" id="markdown-toc-kompose-convert">Kompose Convert</a>        <ul>
          <li><a href="#kubernetes" id="markdown-toc-kubernetes">Kubernetes</a></li>
          <li><a href="#openshift" id="markdown-toc-openshift">OpenShift</a></li>
        </ul>
      </li>
      <li><a href="#alternative-conversions" id="markdown-toc-alternative-conversions">Alternative Conversions</a></li>
      <li><a href="#labels" id="markdown-toc-labels">Labels</a></li>
      <li><a href="#restart" id="markdown-toc-restart">Restart</a>        <ul>
          <li><a href="#warning-about-deployment-configs" id="markdown-toc-warning-about-deployment-configs">Warning about Deployment Config’s</a></li>
        </ul>
      </li>
      <li><a href="#build-and-push-image" id="markdown-toc-build-and-push-image">Build and push image</a>        <ul>
          <li><a href="#authentication-on-registry" id="markdown-toc-authentication-on-registry">Authentication on registry</a></li>
        </ul>
      </li>
      <li><a href="#docker-compose-versions" id="markdown-toc-docker-compose-versions">Docker Compose Versions</a></li>
    </ul>
  </li>
</ul>

<p>Kompose has support for two providers: OpenShift and Kubernetes.
You can choose a targeted provider using global option <code class="highlighter-rouge">--provider</code>. If no provider is specified, Kubernetes is set by default.</p>

<h2 id="kompose-convert">Kompose Convert</h2>

<p>Kompose supports conversion of V1, V2, and V3 Docker Compose files into Kubernetes and OpenShift objects.</p>

<h3 id="kubernetes">Kubernetes</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>kompose <span class="nt">--file</span> docker-voting.yml convert
WARN Unsupported key networks - ignoring
WARN Unsupported key build - ignoring
INFO Kubernetes file <span class="s2">"worker-svc.yaml"</span> created
INFO Kubernetes file <span class="s2">"db-svc.yaml"</span> created
INFO Kubernetes file <span class="s2">"redis-svc.yaml"</span> created
INFO Kubernetes file <span class="s2">"result-svc.yaml"</span> created
INFO Kubernetes file <span class="s2">"vote-svc.yaml"</span> created
INFO Kubernetes file <span class="s2">"redis-deployment.yaml"</span> created
INFO Kubernetes file <span class="s2">"result-deployment.yaml"</span> created
INFO Kubernetes file <span class="s2">"vote-deployment.yaml"</span> created
INFO Kubernetes file <span class="s2">"worker-deployment.yaml"</span> created
INFO Kubernetes file <span class="s2">"db-deployment.yaml"</span> created

<span class="nv">$ </span><span class="nb">ls
</span>db-deployment.yaml  docker-compose.yml         docker-gitlab.yml  redis-deployment.yaml  result-deployment.yaml  vote-deployment.yaml  worker-deployment.yaml
db-svc.yaml         docker-voting.yml          redis-svc.yaml     result-svc.yaml        vote-svc.yaml           worker-svc.yaml
</code></pre></div></div>

<p>You can also provide multiple docker-compose files at the same time:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>kompose <span class="nt">-f</span> docker-compose.yml <span class="nt">-f</span> docker-guestbook.yml convert
INFO Kubernetes file <span class="s2">"frontend-service.yaml"</span> created         
INFO Kubernetes file <span class="s2">"mlbparks-service.yaml"</span> created         
INFO Kubernetes file <span class="s2">"mongodb-service.yaml"</span> created          
INFO Kubernetes file <span class="s2">"redis-master-service.yaml"</span> created     
INFO Kubernetes file <span class="s2">"redis-slave-service.yaml"</span> created      
INFO Kubernetes file <span class="s2">"frontend-deployment.yaml"</span> created      
INFO Kubernetes file <span class="s2">"mlbparks-deployment.yaml"</span> created      
INFO Kubernetes file <span class="s2">"mongodb-deployment.yaml"</span> created       
INFO Kubernetes file <span class="s2">"mongodb-claim0-persistentvolumeclaim.yaml"</span> created 
INFO Kubernetes file <span class="s2">"redis-master-deployment.yaml"</span> created  
INFO Kubernetes file <span class="s2">"redis-slave-deployment.yaml"</span> created   

<span class="nv">$ </span><span class="nb">ls
</span>mlbparks-deployment.yaml  mongodb-service.yaml                       redis-slave-service.jsonmlbparks-service.yaml  
frontend-deployment.yaml  mongodb-claim0-persistentvolumeclaim.yaml  redis-master-service.yaml
frontend-service.yaml     mongodb-deployment.yaml                    redis-slave-deployment.yaml
redis-master-deployment.yaml
</code></pre></div></div>

<p>When multiple docker-compose files are provided the configuration is merged. Any configuration that is common will be over ridden by subsequent file.</p>

<h3 id="openshift">OpenShift</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>kompose <span class="nt">--provider</span> openshift <span class="nt">--file</span> docker-voting.yml convert
WARN <span class="o">[</span>worker] Service cannot be created because of missing port.
INFO OpenShift file <span class="s2">"vote-service.yaml"</span> created             
INFO OpenShift file <span class="s2">"db-service.yaml"</span> created               
INFO OpenShift file <span class="s2">"redis-service.yaml"</span> created            
INFO OpenShift file <span class="s2">"result-service.yaml"</span> created           
INFO OpenShift file <span class="s2">"vote-deploymentconfig.yaml"</span> created    
INFO OpenShift file <span class="s2">"vote-imagestream.yaml"</span> created         
INFO OpenShift file <span class="s2">"worker-deploymentconfig.yaml"</span> created  
INFO OpenShift file <span class="s2">"worker-imagestream.yaml"</span> created       
INFO OpenShift file <span class="s2">"db-deploymentconfig.yaml"</span> created      
INFO OpenShift file <span class="s2">"db-imagestream.yaml"</span> created           
INFO OpenShift file <span class="s2">"redis-deploymentconfig.yaml"</span> created   
INFO OpenShift file <span class="s2">"redis-imagestream.yaml"</span> created        
INFO OpenShift file <span class="s2">"result-deploymentconfig.yaml"</span> created  
INFO OpenShift file <span class="s2">"result-imagestream.yaml"</span> created  
</code></pre></div></div>

<p>It also supports creating buildconfig for build directive in a service. By default, it uses the remote repo for the current git branch as the source repo, and the current branch as the source branch for the build. You can specify a different source repo and branch using <code class="highlighter-rouge">--build-repo</code> and <code class="highlighter-rouge">--build-branch</code> options respectively.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>kompose <span class="nt">--provider</span> openshift <span class="nt">--file</span> buildconfig/docker-compose.yml convert
WARN <span class="o">[</span>foo] Service cannot be created because of missing port. 
INFO OpenShift Buildconfig using git@github.com:rtnpro/kompose.git::master as source. 
INFO OpenShift file <span class="s2">"foo-deploymentconfig.yaml"</span> created     
INFO OpenShift file <span class="s2">"foo-imagestream.yaml"</span> created          
INFO OpenShift file <span class="s2">"foo-buildconfig.yaml"</span> created 
</code></pre></div></div>

<p><strong>Note</strong>: If you are manually pushing the Openshift artifacts using <code class="highlighter-rouge">oc create -f</code>, you need to ensure that you push the imagestream artifact before the buildconfig artifact, to workaround this Openshift issue: https://github.com/openshift/origin/issues/4518 .</p>

<h2 id="alternative-conversions">Alternative Conversions</h2>

<p>The default <code class="highlighter-rouge">kompose</code> transformation will generate Kubernetes <a href="http://kubernetes.io/docs/user-guide/deployments/">Deployments</a> and <a href="http://kubernetes.io/docs/user-guide/services/">Services</a>, in yaml format. You have alternative option to generate json with <code class="highlighter-rouge">-j</code>. Also, you can alternatively generate <a href="http://kubernetes.io/docs/user-guide/replication-controller/">Replication Controllers</a> objects, <a href="http://kubernetes.io/docs/admin/daemons/">Daemon Sets</a>, <a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/">Statefulset</a> or <a href="https://github.com/helm/helm">Helm</a> charts.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>kompose convert <span class="nt">-j</span>
INFO Kubernetes file <span class="s2">"redis-svc.json"</span> created
INFO Kubernetes file <span class="s2">"web-svc.json"</span> created
INFO Kubernetes file <span class="s2">"redis-deployment.json"</span> created
INFO Kubernetes file <span class="s2">"web-deployment.json"</span> created
</code></pre></div></div>
<p>The <code class="highlighter-rouge">*-deployment.json</code> files contain the Deployment objects.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>kompose convert <span class="nt">--controller</span> replicationController
INFO Kubernetes file <span class="s2">"redis-svc.yaml"</span> created
INFO Kubernetes file <span class="s2">"web-svc.yaml"</span> created
INFO Kubernetes file <span class="s2">"redis-replicationcontroller.yaml"</span> created
INFO Kubernetes file <span class="s2">"web-replicationcontroller.yaml"</span> created
</code></pre></div></div>

<p>The <code class="highlighter-rouge">*-replicationcontroller.yaml</code> files contain the Replication Controller objects. If you want to specify replicas (default is 1), use <code class="highlighter-rouge">--replicas</code> flag: <code class="highlighter-rouge">$ kompose convert --controller replicationController --replicas 3</code></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>kompose convert <span class="nt">--controller</span> daemonSet
INFO Kubernetes file <span class="s2">"redis-svc.yaml"</span> created
INFO Kubernetes file <span class="s2">"web-svc.yaml"</span> created
INFO Kubernetes file <span class="s2">"redis-daemonset.yaml"</span> created
INFO Kubernetes file <span class="s2">"web-daemonset.yaml"</span> created
</code></pre></div></div>

<p>The <code class="highlighter-rouge">*-daemonset.yaml</code> files contain the Daemon Set objects</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>kompose convert <span class="nt">--controller</span> statefulset
INFO Kubernetes file <span class="s2">"db-service.yaml"</span> created    
INFO Kubernetes file <span class="s2">"wordpress-service.yaml"</span> created 
INFO Kubernetes file <span class="s2">"db-statefulset.yaml"</span> created 
INFO Kubernetes file <span class="s2">"wordpress-statefulset.yaml"</span> created 
</code></pre></div></div>

<p>The <code class="highlighter-rouge">*statefulset-.yaml</code> files contain the Statefulset objects.</p>

<p>If you want to generate a Chart to be used with <a href="https://github.com/kubernetes/helm">Helm</a> simply do:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>kompose convert <span class="nt">-c</span> 
INFO Kubernetes file <span class="s2">"web-svc.yaml"</span> created
INFO Kubernetes file <span class="s2">"redis-svc.yaml"</span> created
INFO Kubernetes file <span class="s2">"web-deployment.yaml"</span> created
INFO Kubernetes file <span class="s2">"redis-deployment.yaml"</span> created
chart created <span class="k">in</span> <span class="s2">"./docker-compose/"</span>

<span class="nv">$ </span>tree docker-compose/
docker-compose
├── Chart.yaml
├── README.md
└── templates
    ├── redis-deployment.yaml
    ├── redis-svc.yaml
    ├── web-deployment.yaml
    └── web-svc.yaml
</code></pre></div></div>

<p>The chart structure is aimed at providing a skeleton for building your Helm charts. It’s compatible with both Helm V2 and Helm V3.</p>

<h2 id="labels">Labels</h2>

<p><code class="highlighter-rouge">kompose</code> supports Kompose-specific labels within the <code class="highlighter-rouge">docker-compose.yml</code> file to
explicitly define the generated resources’ behavior upon conversion, like Service, PersistentVolumeClaim…</p>

<p>The currently supported options are:</p>

<table>
  <thead>
    <tr>
      <th>Key</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>kompose.service.type</td>
      <td>nodeport / clusterip / loadbalancer / headless</td>
    </tr>
    <tr>
      <td>kompose.service.group</td>
      <td>name to group the containers contained in a single pod</td>
    </tr>
    <tr>
      <td>kompose.service.expose</td>
      <td>true / hostnames (separated by comma)</td>
    </tr>
    <tr>
      <td>kompose.service.nodeport.port</td>
      <td>port value (string)</td>
    </tr>
    <tr>
      <td>kompose.service.expose.tls-secret</td>
      <td>secret name</td>
    </tr>
    <tr>
      <td>kompose.volume.size</td>
      <td>kubernetes supported volume size</td>
    </tr>
    <tr>
      <td>kompose.volume.storage-class-name</td>
      <td>kubernetes supported volume storageClassName</td>
    </tr>
    <tr>
      <td>kompose.volume.type</td>
      <td>use k8s volume type, eg “configMap”, “persistentVolumeClaim”, “emptyDir”, “hostPath”</td>
    </tr>
    <tr>
      <td>kompose.controller.type</td>
      <td>deployment / daemonset / replicationcontroller</td>
    </tr>
    <tr>
      <td>kompose.image-pull-policy</td>
      <td>kubernetes pods imagePullPolicy</td>
    </tr>
    <tr>
      <td>kompose.image-pull-secret</td>
      <td>kubernetes secret name for imagePullSecrets</td>
    </tr>
    <tr>
      <td>kompose.service.healthcheck.readiness.disable</td>
      <td>kubernetes readiness disable</td>
    </tr>
    <tr>
      <td>kompose.service.healthcheck.readiness.test</td>
      <td>kubernetes readiness exec command</td>
    </tr>
    <tr>
      <td>kompose.service.healthcheck.readiness.http_get_path</td>
      <td>kubernetes readiness httpGet path</td>
    </tr>
    <tr>
      <td>kompose.service.healthcheck.readiness.http_get_port</td>
      <td>kubernetes readiness httpGet port</td>
    </tr>
    <tr>
      <td>kompose.service.healthcheck.readiness.tcp_port</td>
      <td>kubernetes readiness tcpSocket port</td>
    </tr>
    <tr>
      <td>kompose.service.healthcheck.readiness.interval</td>
      <td>kubernetes readiness interval value</td>
    </tr>
    <tr>
      <td>kompose.service.healthcheck.readiness.timeout</td>
      <td>kubernetes readiness timeout value</td>
    </tr>
    <tr>
      <td>kompose.service.healthcheck.readiness.retries</td>
      <td>kubernetes readiness retries value</td>
    </tr>
    <tr>
      <td>kompose.service.healthcheck.readiness.start_period</td>
      <td>kubernetes readiness start_period</td>
    </tr>
    <tr>
      <td>kompose.service.healthcheck.liveness.http_get_path</td>
      <td>kubernetes liveness httpGet path</td>
    </tr>
    <tr>
      <td>kompose.service.healthcheck.liveness.http_get_port</td>
      <td>kubernetes liveness httpGet port</td>
    </tr>
    <tr>
      <td>kompose.service.healthcheck.liveness.tcp_port</td>
      <td>kubernetes liveness tcpSocket port</td>
    </tr>
  </tbody>
</table>

<p><strong>Note</strong>: <code class="highlighter-rouge">kompose.service.type</code> label should be defined with <code class="highlighter-rouge">ports</code> only (except for headless service), otherwise <code class="highlighter-rouge">kompose</code> will fail.</p>

<ul>
  <li><code class="highlighter-rouge">kompose.service.type</code> defines the type of service to be created.</li>
</ul>

<p>For example:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">2"</span>
<span class="na">services</span><span class="pi">:</span> 
  <span class="na">nginx</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">nginx</span>
    <span class="na">dockerfile</span><span class="pi">:</span> <span class="s">foobar</span>
    <span class="na">build</span><span class="pi">:</span> <span class="s">./foobar</span>
    <span class="na">cap_add</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">ALL</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">foobar</span>
    <span class="na">labels</span><span class="pi">:</span> 
      <span class="na">kompose.service.type</span><span class="pi">:</span> <span class="s">nodeport</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">kompose.service.group</code> defines the group of containers included in a single pod.</li>
</ul>

<p>For example:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3"</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">nginx</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">nginx</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">logs</span>
    <span class="na">labels</span><span class="pi">:</span> 
      <span class="pi">-</span> <span class="s">kompose.service.group=sidecar</span>

  <span class="na">logs</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">busybox</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">tail</span><span class="nv"> </span><span class="s">-f</span><span class="nv"> </span><span class="s">/var/log/nginx/access.log"</span><span class="pi">]</span>
    <span class="na">labels</span><span class="pi">:</span> 
      <span class="pi">-</span> <span class="s">kompose.service.group=sidecar</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">kompose.service.expose</code> defines if the service needs to be made accessible from outside the cluster or not. If the value is set to “true”, the provider sets the endpoint automatically, and for any other value, the value is set as the hostname. If multiple ports are defined in a service, the first one is chosen to be the exposed.
    <ul>
      <li>For the Kubernetes provider, an ingress resource is created and it is assumed that an ingress controller has already been configured. If the value is set to a comma sepatated list, multiple hostnames are supported.Hostname with path is also supported.</li>
      <li>For the OpenShift provider, a route is created.</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">kompose.service.nodeport.port</code> defines the port value when service type is <code class="highlighter-rouge">nodeport</code>, this label should only be set when the service only contains 1 port. Usually kubernetes define a port range for node port values, kompose will not validate this.</li>
  <li><code class="highlighter-rouge">kompose.service.expose.tls-secret</code> provides the name of the TLS secret to use with the Kubernetes ingress controller. This requires kompose.service.expose to be set.</li>
</ul>

<p>For example:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">2"</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">web</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">tuna/docker-counter23</span>
    <span class="na">ports</span><span class="pi">:</span>
     <span class="pi">-</span> <span class="s2">"</span><span class="s">5000:5000"</span>
    <span class="na">links</span><span class="pi">:</span>
     <span class="pi">-</span> <span class="s">redis</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">kompose.service.expose</span><span class="pi">:</span> <span class="s2">"</span><span class="s">counter.example.com,foobar.example.com"</span>
      <span class="na">kompose.service.expose.tls-secret</span><span class="pi">:</span> <span class="s2">"</span><span class="s">example-secret"</span>
  <span class="na">redis</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">redis:3.0</span>
    <span class="na">ports</span><span class="pi">:</span>
     <span class="pi">-</span> <span class="s2">"</span><span class="s">6379"</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">kompose.serviceaccount-name</code> defines the service account name to provide the credential info of the pod.</li>
</ul>

<p>For example:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.4'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">app</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">python</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">kompose.serviceaccount-name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">my-service"</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">kompose.image-pull-secret</code> defines a kubernetes secret name for imagePullSecrets podspec field.
This secret will be used for pulling private images.
For example:</li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">2'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">tm-service</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">premium/private-image</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">kompose.image-pull-secret</span><span class="pi">:</span> <span class="s2">"</span><span class="s">example-kubernetes-secret"</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">kompose.volume.size</code> defines the requests storage’s size in the PersistentVolumeClaim, or you can use command line parameter <code class="highlighter-rouge">--pvc-request-size</code>. 
The priority follow label (kompose.volume.size) &gt; command parameter(–pvc-request-size) &gt; defaultSize (100Mi)</li>
</ul>

<p>For example:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">2'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">db</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">postgres:10.1</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">kompose.volume.size</span><span class="pi">:</span> <span class="s">1Gi</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">db-data:/var/lib/postgresql/data</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">kompose.volume.storage-class-name</code> defines the requests storage’s class name in the PersistentVolumeClaim.</li>
</ul>

<p>For example:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">db</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">postgres:10.1</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">kompose.volume.storage-class-name</span><span class="pi">:</span> <span class="s">custom-storage-class-name</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">db-data:/var/lib/postgresql/data</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">kompose.controller.type</code> defines which controller type should convert for this service</li>
</ul>

<p>For example:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>web:
  image: wordpress:4.5
  ports:
    - '80'
  environment:
    WORDPRESS_AUTH_KEY: changeme
    WORDPRESS_SECURE_AUTH_KEY: changeme
    WORDPRESS_LOGGED_IN_KEY: changeme
    WORDPRESS_NONCE_KEY: changeme
    WORDPRESS_AUTH_SALT: changeme
    WORDPRESS_SECURE_AUTH_SALT: changeme
    WORDPRESS_LOGGED_IN_SALT: changeme
    WORDPRESS_NONCE_SALT: changeme
    WORDPRESS_NONCE_AA: changeme
  restart: always
  links:
    - 'db:mysql'
db:
  image: mysql:5.7
  environment:
    MYSQL_ROOT_PASSWORD: password
  restart: always
  labels:
    project.logs: /var/log/mysql
    kompose.controller.type: daemonset
</code></pre></div></div>

<p>Service <code class="highlighter-rouge">web</code> will be converted to <code class="highlighter-rouge">Deployment</code> as default, service <code class="highlighter-rouge">db</code> will be converted to <code class="highlighter-rouge">DaemonSet</code> because of <code class="highlighter-rouge">kompose.controller.type</code> label.</p>

<ul>
  <li><code class="highlighter-rouge">kompose.image-pull-policy</code> defines Kubernetes PodSpec imagePullPolicy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.</li>
</ul>

<p>For example:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">2'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">example-service</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">example-image</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">kompose.image-pull-policy</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Never"</span>
</code></pre></div></div>

<p>For example:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">2'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">example-service</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">example-image</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">kompose.service.healthcheck.liveness.http_get_path</span><span class="pi">:</span> <span class="s">/health/ping</span>
      <span class="na">kompose.service.healthcheck.liveness.http_get_port</span><span class="pi">:</span> <span class="m">8080</span>
    <span class="na">healthcheck</span><span class="pi">:</span>
      <span class="na">interval</span><span class="pi">:</span> <span class="s">10s</span>
      <span class="na">timeout</span><span class="pi">:</span> <span class="s">10s</span>
      <span class="na">retries</span><span class="pi">:</span> <span class="m">3</span>
      <span class="na">start_period</span><span class="pi">:</span> <span class="s">30s</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">kompose.service.healthcheck.liveness</code> defines Kubernetes <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-liveness-http-request">liveness HttpRequest</a>, If you use healthcheck without liveness labels, have to define <code class="highlighter-rouge">test</code> in healcheck it’s work to Kubernetes <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-readiness-probes">liveness command</a></li>
</ul>

<p>For example:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">2'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">example-service</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">example-image</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">kompose.service.healthcheck.readiness.test</span><span class="pi">:</span> <span class="s">CMD curl -f "http://localhost:8080/health/ping"</span>
      <span class="na">kompose.service.healthcheck.readiness.interval</span><span class="pi">:</span> <span class="s">10s</span>
      <span class="na">kompose.service.healthcheck.readiness.timeout</span><span class="pi">:</span> <span class="s">10s</span>
      <span class="na">kompose.service.healthcheck.readiness.retries</span><span class="pi">:</span> <span class="m">3</span>
      <span class="na">kompose.service.healthcheck.readiness.start_period</span><span class="pi">:</span> <span class="s">30s</span>
</code></pre></div></div>
<ul>
  <li><code class="highlighter-rouge">kompose.service.healthcheck.readiness</code> defines Kubernetes <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-readiness-probes">readiness</a></li>
</ul>

<h2 id="restart">Restart</h2>

<p>If you want to create normal pods without controller you can use <code class="highlighter-rouge">restart</code> construct of docker-compose to define that. Follow table below to see what happens on the <code class="highlighter-rouge">restart</code> value.</p>

<table>
  <thead>
    <tr>
      <th><code class="highlighter-rouge">docker-compose</code> <code class="highlighter-rouge">restart</code></th>
      <th>object created</th>
      <th>Pod <code class="highlighter-rouge">restartPolicy</code></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">""</code></td>
      <td>controller object</td>
      <td><code class="highlighter-rouge">Always</code></td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">always</code></td>
      <td>controller object</td>
      <td><code class="highlighter-rouge">Always</code></td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">unless-stopped</code></td>
      <td>controller object</td>
      <td><code class="highlighter-rouge">Always</code></td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">on-failure</code></td>
      <td>Pod</td>
      <td><code class="highlighter-rouge">OnFailure</code></td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">no</code></td>
      <td>Pod</td>
      <td><code class="highlighter-rouge">Never</code></td>
    </tr>
  </tbody>
</table>

<p><strong>Note</strong>: controller object could be <code class="highlighter-rouge">deployment</code> or <code class="highlighter-rouge">replicationcontroller</code>, etc.</p>

<p>For e.g. <code class="highlighter-rouge">pival</code> service will become pod down here. This container calculated value of <code class="highlighter-rouge">pi</code>.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">2'</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">pival</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">perl</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">perl"</span><span class="pi">,</span>  <span class="s2">"</span><span class="s">-Mbignum=bpi"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">-wle"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">print</span><span class="nv"> </span><span class="s">bpi(2000)"</span><span class="pi">]</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s2">"</span><span class="s">on-failure"</span>
</code></pre></div></div>

<h4 id="warning-about-deployment-configs">Warning about Deployment Config’s</h4>

<p>If the Docker Compose file has a volume specified for a service, the Deployment (Kubernetes) or DeploymentConfig (OpenShift) strategy is changed to “Recreate” instead of “RollingUpdate” (default). This is done to avoid multiple instances of a service from accessing a volume at the same time.</p>

<p>If the Docker Compose file has service name with <code class="highlighter-rouge">_</code> or <code class="highlighter-rouge">.</code> in it (eg.<code class="highlighter-rouge">web_service</code> or <code class="highlighter-rouge">web.service</code>), then it will be replaced by <code class="highlighter-rouge">-</code> and the service name will be renamed accordingly (eg.<code class="highlighter-rouge">web-service</code>). Kompose does this because “Kubernetes” doesn’t allow <code class="highlighter-rouge">_</code> in object name.</p>

<p>Please note that changing service name might break some <code class="highlighter-rouge">docker-compose</code> files.</p>

<h2 id="build-and-push-image">Build and push image</h2>

<p>If the Docker Compose file has <code class="highlighter-rouge">build</code> or <code class="highlighter-rouge">build:context, build:dockerfile</code> keys, build will run when <code class="highlighter-rouge">--build</code> specified.</p>

<p>And Image will push to <em>docker.io</em> (default) when <code class="highlighter-rouge">--push-image=true</code> specified.</p>

<p>It is possible to push to custom registry by specify <code class="highlighter-rouge">--push-image-registry</code>, which will override the registry from image name.</p>

<h3 id="authentication-on-registry">Authentication on registry</h3>

<p>Kompose uses the docker authentication from file <code class="highlighter-rouge">$DOCKER_CONFIG/config.json</code>, <code class="highlighter-rouge">$HOME/.docker/config.json</code>, and <code class="highlighter-rouge">$HOME/.dockercfg</code> after <code class="highlighter-rouge">docker login</code>.</p>

<p><strong>This only works fine on Linux but macOS would fail when using <code class="highlighter-rouge">"credsStore": "osxkeychain"</code>.</strong></p>

<p>However, there is an approach to push successfully on macOS, by not using <code class="highlighter-rouge">osxkeychain</code> for <code class="highlighter-rouge">credsStore</code>. To disable <code class="highlighter-rouge">osxkeychain</code>:</p>
<ul>
  <li>remove <code class="highlighter-rouge">credsStore</code> from <code class="highlighter-rouge">config.json</code> file, and <code class="highlighter-rouge">docker login</code> again.</li>
  <li>for some docker desktop versions, there is a setting <code class="highlighter-rouge">Securely store Docker logins in macOS keychain</code>, which should be unchecked. Then restart docker desktop if needed, and <code class="highlighter-rouge">docker login</code> again.</li>
</ul>

<p>Now <code class="highlighter-rouge">config.json</code> should contain base64 encoded passwords, then push image should succeed. Working, but not safe though! Use it at your risk.</p>

<p>For Windows, there is also <code class="highlighter-rouge">credsStore</code> which is <code class="highlighter-rouge">wincred</code>. Technically it will fail on authentication as macOS does, but you can try the approach above like macOS too.</p>

<h2 id="docker-compose-versions">Docker Compose Versions</h2>

<p>Kompose supports Docker Compose versions: 1, 2 and 3. We have limited support on versions 2.1 and 3.2 due to their experimental nature.</p>

<p>A full list on compatibility between all three versions is listed in our <a href="/docs/conversion.md">conversion document</a> including a list of all incompatible Docker Compose keys.</p>
:ET