I"Ö<h1 id="architecture-and-internal-design">Architecture and Internal Design</h1>

<ul id="markdown-toc">
  <li><a href="#architecture-and-internal-design" id="markdown-toc-architecture-and-internal-design">Architecture and Internal Design</a>    <ul>
      <li><a href="#loader" id="markdown-toc-loader">Loader</a></li>
      <li><a href="#komposeobject" id="markdown-toc-komposeobject">KomposeObject</a></li>
      <li><a href="#transformer" id="markdown-toc-transformer">Transformer</a></li>
      <li><a href="#outputter" id="markdown-toc-outputter">Outputter</a></li>
    </ul>
  </li>
</ul>

<p><code class="highlighter-rouge">kompose</code> has 3 stages: Loader, Transformer and Outputter. Each Stage should have well defined interface so it is easy to write new Loader, Transformer or Outputters and plug it in. Currently only Loader and Transformer interfaces are defined.</p>

<p><img src="/docs/images/design_diagram.png" alt="Design Diagram" /></p>

<h2 id="loader">Loader</h2>

<p>Loader reads input file (now <code class="highlighter-rouge">kompose</code> supports <a href="https://docs.docker.com/compose">Docker Compose</a> v1, v2 and converts it to KomposeObject.</p>

<p>Loader is represented by a Loader interface:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Loader</span> <span class="k">interface</span> <span class="p">{</span>
      <span class="n">LoadFile</span><span class="p">(</span><span class="n">file</span> <span class="kt">string</span><span class="p">)</span> <span class="n">kobject</span><span class="o">.</span><span class="n">KomposeObject</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Every loader ‚Äúimplementation‚Äù should be placed into <code class="highlighter-rouge">kompose/pkg/loader</code> (like compose). More input formats will be supported in future. You can take a look for more details at:</p>

<ul>
  <li><a href="https://github.com/kubernetes/kompose/tree/master/pkg/loader">kompose/pkg/loader</a></li>
  <li><a href="https://github.com/kubernetes/kompose/tree/master/pkg/loader/compose">kompose/pkg/loader/compose</a></li>
</ul>

<h2 id="komposeobject">KomposeObject</h2>

<p><code class="highlighter-rouge">KomposeObject</code> is Kompose internal representation of all containers loaded from input file. First version of <code class="highlighter-rouge">KomposeObject</code> looks like this (source: <a href="https://github.com/kubernetes/kompose/blob/master/pkg/kobject/kobject.go">kobject.go</a>):</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// KomposeObject holds the generic struct of Kompose transformation</span>
<span class="k">type</span> <span class="n">KomposeObject</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">ServiceConfigs</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="n">ServiceConfig</span>
<span class="p">}</span>

<span class="c">// ServiceConfig holds the basic struct of a container</span>
<span class="k">type</span> <span class="n">ServiceConfig</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">ContainerName</span> <span class="kt">string</span>
	<span class="n">Image</span>         <span class="kt">string</span>
	<span class="n">Environment</span>   <span class="p">[]</span><span class="n">EnvVar</span>
	<span class="n">Port</span>          <span class="p">[]</span><span class="n">Ports</span>
	<span class="n">Command</span>       <span class="p">[]</span><span class="kt">string</span>
	<span class="n">WorkingDir</span>    <span class="kt">string</span>
	<span class="n">Args</span>          <span class="p">[]</span><span class="kt">string</span>
	<span class="n">Volumes</span>       <span class="p">[]</span><span class="kt">string</span>
	<span class="n">Network</span>       <span class="p">[]</span><span class="kt">string</span>
	<span class="n">Labels</span>        <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span>
	<span class="n">Annotations</span>   <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span>
	<span class="n">CPUSet</span>        <span class="kt">string</span>
	<span class="n">CPUShares</span>     <span class="kt">int64</span>
	<span class="n">CPUQuota</span>      <span class="kt">int64</span>
	<span class="n">CapAdd</span>        <span class="p">[]</span><span class="kt">string</span>
	<span class="n">CapDrop</span>       <span class="p">[]</span><span class="kt">string</span>
	<span class="n">Entrypoint</span>    <span class="p">[]</span><span class="kt">string</span>
	<span class="n">Expose</span>        <span class="p">[]</span><span class="kt">string</span>
	<span class="n">Privileged</span>    <span class="kt">bool</span>
	<span class="n">Restart</span>       <span class="kt">string</span>
	<span class="n">User</span>          <span class="kt">string</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="transformer">Transformer</h2>

<p>Transformer takes KomposeObject and converts it to target/output format (at this moment, there are sets of kubernetes/openshift objects). Similar to <code class="highlighter-rouge">Loader</code>, Transformer is represented by a Transformer interface:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Transformer</span> <span class="k">interface</span> <span class="p">{</span>
     <span class="n">Transform</span><span class="p">(</span><span class="n">kobject</span><span class="o">.</span><span class="n">KomposeObject</span><span class="p">,</span> <span class="n">kobject</span><span class="o">.</span><span class="n">ConvertOptions</span><span class="p">)</span> <span class="p">[]</span><span class="n">runtime</span><span class="o">.</span><span class="n">Object</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If you wish to add more providers which contain different kind of objects, transformer would be the place to look into. At this moment Kompose supports Kubernetes (by default) and Openshift providers. More details at:</p>

<ul>
  <li><a href="https://github.com/kubernetes/kompose/tree/master/pkg/transformer">kompose/pkg/transformer</a></li>
  <li><a href="https://github.com/kubernetes/kompose/tree/master/pkg/transformer/kubernetes">kompose/pkg/transformer/kubernetes</a></li>
  <li><a href="https://github.com/kubernetes/kompose/tree/master/pkg/transformer/openshift">kompose/pkg/transformer/openshift</a></li>
</ul>

<h2 id="outputter">Outputter</h2>

<p>Outputter takes Transformer result and executes given action. For example action can be displaying result to stdout or directly deploying artifacts to Kubernetes/OpenShift.</p>
:ET