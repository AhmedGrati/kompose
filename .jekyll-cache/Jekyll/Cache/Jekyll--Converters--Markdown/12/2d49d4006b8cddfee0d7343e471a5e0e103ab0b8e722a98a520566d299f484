I"[@<h1 id="conversion-matrix">Conversion Matrix</h1>

<ul id="markdown-toc">
  <li><a href="#conversion-matrix" id="markdown-toc-conversion-matrix">Conversion Matrix</a>    <ul>
      <li><a href="#version-table" id="markdown-toc-version-table">Version Table</a></li>
      <li><a href="#conversion-table" id="markdown-toc-conversion-table">Conversion Table</a></li>
    </ul>
  </li>
</ul>

<p>This document outlines all possible conversion details regarding <code class="highlighter-rouge">docker-compose.yaml</code> values to Kubernetes / OpenShift artifacts.</p>

<h2 id="version-table">Version Table</h2>

<table>
  <thead>
    <tr>
      <th>Supported</th>
      <th>Compose Version</th>
      <th>Docker Engine Version</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>N</td>
      <td>3.8</td>
      <td>19.03.0+</td>
    </tr>
    <tr>
      <td>N</td>
      <td>3.7</td>
      <td>18.06.0+</td>
    </tr>
    <tr>
      <td>N</td>
      <td>3.6</td>
      <td>18.02.0+</td>
    </tr>
    <tr>
      <td>N</td>
      <td>3.5</td>
      <td>17.12.0+</td>
    </tr>
    <tr>
      <td>N</td>
      <td>3.4</td>
      <td>17.09.0+</td>
    </tr>
    <tr>
      <td>Y</td>
      <td>3.3</td>
      <td>17.06.0+</td>
    </tr>
    <tr>
      <td>Y</td>
      <td>3.2</td>
      <td>17.04.0+</td>
    </tr>
    <tr>
      <td>Y</td>
      <td>3.1</td>
      <td>1.13.1+</td>
    </tr>
    <tr>
      <td>Y</td>
      <td>3.0</td>
      <td>1.13.0+</td>
    </tr>
    <tr>
      <td>Y</td>
      <td>2.4</td>
      <td>17.12.0+</td>
    </tr>
    <tr>
      <td>Y</td>
      <td>2.3</td>
      <td>17.06.0+</td>
    </tr>
    <tr>
      <td>Y</td>
      <td>2.2</td>
      <td>1.13.0+</td>
    </tr>
    <tr>
      <td>Y</td>
      <td>2.1</td>
      <td>1.12.0+</td>
    </tr>
    <tr>
      <td>Y</td>
      <td>2.0</td>
      <td>1.10.0+</td>
    </tr>
  </tbody>
</table>

<p><strong>Note:</strong> We don’t support anything 3.4 and above at the moment. It is reccomended to specify <code class="highlighter-rouge">version: "3.3"</code> in your <code class="highlighter-rouge">docker-compose.yaml</code> and converting. We use a library called <a href="https://github.com/docker/libcompose">libcompose</a> that supports up to version <code class="highlighter-rouge">3.3</code>. If you are interested in adding additional support, please open up a PR!</p>

<h2 id="conversion-table">Conversion Table</h2>

<p><strong>Glossary:</strong></p>

<ul>
  <li><strong>✓:</strong> Converts</li>
  <li><strong>-:</strong> Not in this Docker Compose Version</li>
  <li><strong>n:</strong> Not yet implemented</li>
  <li><strong>x:</strong> Not applicable / no 1-1 conversion</li>
</ul>

<table>
  <thead>
    <tr>
      <th>Keys</th>
      <th>V1</th>
      <th>V2</th>
      <th>V3</th>
      <th>Kubernetes / OpenShift</th>
      <th>Notes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>build</td>
      <td>✓</td>
      <td>✓</td>
      <td>✓</td>
      <td> </td>
      <td>Builds/Pushes to Docker repository. See <a href="https://kompose.io/user-guide/#build-and-push-image">user guide on build and push image</a></td>
    </tr>
    <tr>
      <td>build: context</td>
      <td>✓</td>
      <td>✓</td>
      <td>✓</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>build: dockerfile</td>
      <td>✓</td>
      <td>✓</td>
      <td>✓</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>build: args</td>
      <td>n</td>
      <td>n</td>
      <td>n</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>build: cache_from</td>
      <td>-</td>
      <td>-</td>
      <td>n</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>cap_add</td>
      <td>✓</td>
      <td>✓</td>
      <td>✓</td>
      <td>Container.SecurityContext.Capabilities.Add</td>
      <td> </td>
    </tr>
    <tr>
      <td>cap_drop</td>
      <td>✓</td>
      <td>✓</td>
      <td>✓</td>
      <td>Container.SecurityContext.Capabilities.Drop</td>
      <td> </td>
    </tr>
    <tr>
      <td>command</td>
      <td>✓</td>
      <td>✓</td>
      <td>✓</td>
      <td>Container.Args</td>
      <td> </td>
    </tr>
    <tr>
      <td>configs</td>
      <td>n</td>
      <td>n</td>
      <td>✓</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>configs: short-syntax</td>
      <td>n</td>
      <td>n</td>
      <td>✓</td>
      <td> </td>
      <td>Only create configMap</td>
    </tr>
    <tr>
      <td>configs: long-syntax</td>
      <td>n</td>
      <td>n</td>
      <td>✓</td>
      <td> </td>
      <td>If target path is /, ignore this and only create configMap</td>
    </tr>
    <tr>
      <td>cgroup_parent</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td>Not supported within Kubernetes. See issue https://github.com/kubernetes/kubernetes/issues/11986</td>
    </tr>
    <tr>
      <td>container_name</td>
      <td>✓</td>
      <td>✓</td>
      <td>✓</td>
      <td>Metadata.Name + Deployment.Spec.Containers.Name</td>
      <td> </td>
    </tr>
    <tr>
      <td>credential_spec</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td>Only applicable to Windows containers</td>
    </tr>
    <tr>
      <td>deploy</td>
      <td>-</td>
      <td>-</td>
      <td>✓</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>deploy: mode</td>
      <td>-</td>
      <td>-</td>
      <td>✓</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>deploy: replicas</td>
      <td>-</td>
      <td>-</td>
      <td>✓</td>
      <td>Deployment.Spec.Replicas / DeploymentConfig.Spec.Replicas</td>
      <td> </td>
    </tr>
    <tr>
      <td>deploy: placement</td>
      <td>-</td>
      <td>-</td>
      <td>✓</td>
      <td>Affinity</td>
      <td> </td>
    </tr>
    <tr>
      <td>deploy: update_config</td>
      <td>-</td>
      <td>-</td>
      <td>✓</td>
      <td>Workload.Spec.Strategy</td>
      <td>Deployment / DeploymentConfig</td>
    </tr>
    <tr>
      <td>deploy: resources</td>
      <td>-</td>
      <td>-</td>
      <td>✓</td>
      <td>Containers.Resources.Limits.Memory / Containers.Resources.Limits.CPU</td>
      <td>Support for memory as well as cpu</td>
    </tr>
    <tr>
      <td>deploy: restart_policy</td>
      <td>-</td>
      <td>-</td>
      <td>✓</td>
      <td>Pod generation</td>
      <td>This generated a Pod, see the <a href="http://kompose.io/user-guide/#restart">user guide on restart</a></td>
    </tr>
    <tr>
      <td>deploy: labels</td>
      <td>-</td>
      <td>-</td>
      <td>✓</td>
      <td>Workload.Metadata.Labels</td>
      <td>Only applied to workload resource</td>
    </tr>
    <tr>
      <td>devices</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td>Not supported within Kubernetes, See issue https://github.com/kubernetes/kubernetes/issues/5607</td>
    </tr>
    <tr>
      <td>depends_on</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>dns</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td>Not used within Kubernetes. Kubernetes uses a managed DNS server</td>
    </tr>
    <tr>
      <td>dns_search</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td>See <code class="highlighter-rouge">dns</code> key</td>
    </tr>
    <tr>
      <td>domainname</td>
      <td>✓</td>
      <td>✓</td>
      <td>✓</td>
      <td>SubDomain</td>
      <td> </td>
    </tr>
    <tr>
      <td>tmpfs</td>
      <td>✓</td>
      <td>✓</td>
      <td>✓</td>
      <td>Containers.Volumes.EmptyDir</td>
      <td>Creates emptyDirvolume with medium set to Memory &amp; mounts given directory inside container</td>
    </tr>
    <tr>
      <td>entrypoint</td>
      <td>✓</td>
      <td>✓</td>
      <td>✓</td>
      <td>Container.Command</td>
      <td> </td>
    </tr>
    <tr>
      <td>env_file</td>
      <td>n</td>
      <td>n</td>
      <td>✓</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>environment</td>
      <td>✓</td>
      <td>✓</td>
      <td>✓</td>
      <td>Container.Env</td>
      <td> </td>
    </tr>
    <tr>
      <td>expose</td>
      <td>✓</td>
      <td>✓</td>
      <td>✓</td>
      <td>Service.Spec.Ports</td>
      <td> </td>
    </tr>
    <tr>
      <td>endpoint_mode</td>
      <td>n</td>
      <td>n</td>
      <td>✓</td>
      <td> </td>
      <td>If endpoint_mode=vip, the created Service will be forced to set to NodePort type</td>
    </tr>
    <tr>
      <td>extends</td>
      <td>✓</td>
      <td>✓</td>
      <td>✓</td>
      <td> </td>
      <td>Extends by utilizing the same image supplied</td>
    </tr>
    <tr>
      <td>external_links</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td>Kubernetes uses a flat-structure for all containers and thus external_links does not have a 1-1 conversion</td>
    </tr>
    <tr>
      <td>extra_hosts</td>
      <td>n</td>
      <td>n</td>
      <td>n</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>group_add</td>
      <td>✓</td>
      <td>✓</td>
      <td>✓</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>healthcheck</td>
      <td>-</td>
      <td>n</td>
      <td>✓</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>hostname</td>
      <td>✓</td>
      <td>✓</td>
      <td>✓</td>
      <td>HostName</td>
      <td> </td>
    </tr>
    <tr>
      <td>image</td>
      <td>✓</td>
      <td>✓</td>
      <td>✓</td>
      <td>Deployment.Spec.Containers.Image</td>
      <td> </td>
    </tr>
    <tr>
      <td>isolation</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td>Not applicable as this applies to Windows with HyperV support</td>
    </tr>
    <tr>
      <td>labels</td>
      <td>✓</td>
      <td>✓</td>
      <td>✓</td>
      <td>Metadata.Annotations</td>
      <td> </td>
    </tr>
    <tr>
      <td>links</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td>All containers in the same pod are accessible in Kubernetes</td>
    </tr>
    <tr>
      <td>logging</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td>Kubernetes has built-in logging support at the node-level</td>
    </tr>
    <tr>
      <td>network_mode</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td>Kubernetes uses its own cluster networking</td>
    </tr>
    <tr>
      <td>networks</td>
      <td>✓</td>
      <td>✓</td>
      <td>✓</td>
      <td> </td>
      <td>See <code class="highlighter-rouge">networks</code> key</td>
    </tr>
    <tr>
      <td>networks: aliases</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td>See <code class="highlighter-rouge">networks</code> key</td>
    </tr>
    <tr>
      <td>networks: addresses</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td>See <code class="highlighter-rouge">networks</code> key</td>
    </tr>
    <tr>
      <td>pid</td>
      <td>✓</td>
      <td>✓</td>
      <td>✓</td>
      <td>HostPID</td>
      <td> </td>
    </tr>
    <tr>
      <td>ports</td>
      <td>✓</td>
      <td>✓</td>
      <td>✓</td>
      <td>Service.Spec.Ports</td>
      <td> </td>
    </tr>
    <tr>
      <td>ports: short-syntax</td>
      <td>✓</td>
      <td>✓</td>
      <td>✓</td>
      <td>Service.Spec.Ports</td>
      <td> </td>
    </tr>
    <tr>
      <td>ports: long-syntax</td>
      <td>-</td>
      <td>-</td>
      <td>✓</td>
      <td>Service.Spec.Ports</td>
      <td> </td>
    </tr>
    <tr>
      <td>secrets</td>
      <td>-</td>
      <td>-</td>
      <td>✓</td>
      <td>Secret</td>
      <td>External Secret is not Supported</td>
    </tr>
    <tr>
      <td>secrets: short-syntax</td>
      <td>-</td>
      <td>-</td>
      <td>✓</td>
      <td>Secret</td>
      <td>External Secret is not Supported</td>
    </tr>
    <tr>
      <td>secrets: long-syntax</td>
      <td>-</td>
      <td>-</td>
      <td>✓</td>
      <td>Secret</td>
      <td>External Secret is not Supported</td>
    </tr>
    <tr>
      <td>security_opt</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td>Kubernetes uses its own container naming scheme</td>
    </tr>
    <tr>
      <td>stop_grace_period</td>
      <td>✓</td>
      <td>✓</td>
      <td>✓</td>
      <td>TerminationGracePeriodSeconds</td>
      <td> </td>
    </tr>
    <tr>
      <td>stop_signal</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td>Not supported within Kubernetes. See issue https://github.com/kubernetes/kubernetes/issues/30051</td>
    </tr>
    <tr>
      <td>sysctls</td>
      <td>n</td>
      <td>n</td>
      <td>n</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>ulimits</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td>Not supported within Kubernetes. See issue https://github.com/kubernetes/kubernetes/issues/3595</td>
    </tr>
    <tr>
      <td>userns_mode</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td>Not supported within Kubernetes and ignored in Docker Compose Version 3</td>
    </tr>
    <tr>
      <td>volumes</td>
      <td>✓</td>
      <td>✓</td>
      <td>✓</td>
      <td>PersistentVolumeClaim</td>
      <td>Creates a PersistentVolumeClaim. Can only be created if there is already a PersistentVolume within the cluster</td>
    </tr>
    <tr>
      <td>volumes: short-syntax</td>
      <td>✓</td>
      <td>✓</td>
      <td>✓</td>
      <td>PersistentVolumeClaim</td>
      <td>Creates a PersistentVolumeClaim. Can only be created if there is already a PersistentVolume within the cluster</td>
    </tr>
    <tr>
      <td>volumes: long-syntax</td>
      <td>-</td>
      <td>-</td>
      <td>✓</td>
      <td>PersistentVolumeClaim</td>
      <td>Creates a PersistentVolumeClaim. Can only be created if there is already a PersistentVolume within the cluster</td>
    </tr>
    <tr>
      <td>restart</td>
      <td>✓</td>
      <td>✓</td>
      <td>✓</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td><strong>Volume</strong></td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>driver</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>driver_opts</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>external</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>labels</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td><strong>Network</strong></td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>driver</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>driver_opts</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>enable_ipv6</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>ipam</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>internal</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>labels</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>external</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>
:ET